{"version":3,"sources":["./src/app/@core/data/invites-requests.service.ts","./src/app/@core/data/invites.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAA2C;AAGH;AACI;AACd;AAK+C;AAGG;AAShF,IAAa,sBAAsB,GAAnC,MAAa,sBAAsB;IAClC,YAA6B,OAAe;QAAf,YAAO,GAAP,OAAO,CAAQ;QAEpC,qBAAgB,GAAgC,IAAI,CAAC,OAAO;aAClE,UAAU,CAAuC;YACjD,KAAK,EAAE,kDAAG;;;;;;;;;;;;;;;;;;;IAmBT;YACD,YAAY,EAAE,IAAI;SAClB,CAAC;aACD,YAAY,CAAC,IAAI,CACjB,0DAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,EACtC,4DAAK,EAAE,CACP,CAAC;IA7B4C,CAAC;IA+BhD,qBAAqB;QACpB,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAC9B,CAAC;IAED,kBAAkB,CACjB,aAA8B,EAC9B,OAAiB;QAEjB,OAAO,IAAI,CAAC,OAAO;aACjB,UAAU,CAAuC;YACjD,KAAK,EAAE,kDAAG;;;;;;;;;;;;;;;;;;;;;;;;;KAyBT;YACD,SAAS,EAAE,EAAE,aAAa,EAAE,OAAO,EAAE;YACrC,YAAY,EAAE,IAAI;SAClB,CAAC;aACD,YAAY,CAAC,IAAI,CACjB,0DAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,EACtC,4DAAK,EAAE,CACP,CAAC;IACJ,CAAC;IAED,mBAAmB,CAClB,WAAuC;QAEvC,OAAO,IAAI,CAAC,OAAO;aACjB,MAAM,CAA8C;YACpD,QAAQ,EAAE,kDAAG;;;;;;;;KAQZ;YACD,SAAS,EAAE;gBACV,WAAW;aACX;SACD,CAAC;aACD,IAAI,CACJ,0DAAG,CAAC,CAAC,MAAW,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,EACrD,4DAAK,EAAE,CACP,CAAC;IACJ,CAAC;IAED,WAAW,CAAC,GAAa;QACxB,OAAO,IAAI,CAAC,OAAO;aACjB,MAAM,CAAC;YACP,QAAQ,EAAE,kDAAG;;;;;;KAMZ;YACD,SAAS,EAAE,EAAE,GAAG,EAAE;SAClB,CAAC;aACD,IAAI,CACJ,0DAAG,CAAC,CAAC,MAAW,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,0BAA0B,CAAC,EAC5D,4DAAK,EAAE,CACP,CAAC;IACJ,CAAC;IAED,mBAAmB,CAClB,EAAU,EACV,WAAuC;QAEvC,OAAO,IAAI,CAAC,OAAO;aACjB,MAAM,CAA0D;YAChE,QAAQ,EAAE,kDAAG;;;;;;;;;;;;KAYZ;YACD,SAAS,EAAE;gBACV,EAAE;gBACF,WAAW;aACX;SACD,CAAC;aACD,IAAI,CACJ,0DAAG,CAAC,CAAC,MAAW,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,EACrD,4DAAK,EAAE,CACP,CAAC;IACJ,CAAC;IAEK,4BAA4B,CAAC,IAA4B;;YAC9D,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,kBAAkB,CACxC,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,IAAI,EACT,MAAM,CAAC,MAAM,CAAC,6FAAS,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAC9C,CAAC;YAEF,MAAM,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAC1C,MAAM,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAE1C,MAAM,WAAW,GAA6B;gBAC7C,SAAS,EAAE,MAAM,CAAC,MAAM,CAAC,6FAAS,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC;gBACzD,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,aAAa,EAAE,IAAI,CAAC,OAAO;gBAC3B,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,GAAG,EAAE;oBACJ,WAAW,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;oBACvC,IAAI,EAAE,OAAO;iBACb;aACD,CAAC;YAEF,MAAM,aAAa,GAA+B;gBACjD,SAAS,EAAE,IAAI,CAAC,SAAS;gBACzB,QAAQ,EAAE,IAAI;gBACd,WAAW;aACX,CAAC;YAEF,OAAO,aAAa,CAAC;QACtB,CAAC;KAAA;IAED,0BAA0B,CAAC,UAAkB,EAAE,UAAkB;QAChE,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;YACzB,KAAK,EAAE,kDAAG;;;;;;;;;;IAUT;YACD,SAAS,EAAE,EAAE,UAAU,EAAE,UAAU,EAAE;SACrC,CAAC,CAAC;IACJ,CAAC;IAEK,yBAAyB,CAAC,OAAiB;;YAChD,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,OAAO;iBAC5B,KAAK,CAAC;gBACN,KAAK,EAAE,kDAAG;;;;KAIT;gBACD,SAAS,EAAE,EAAE,OAAO,EAAE;aACtB,CAAC;iBACD,SAAS,EAAE,CAAC;YAEd,OAAO,GAAG,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;QAC9C,CAAC;KAAA;IAEO,kBAAkB,CACzB,KAAa,EACb,aAAqB,EACrB,IAAY,EACZ,SAAiB;QAEjB,MAAM,WAAW,GAAG,kGAAc,CAAC,SAAS,CAAC,CAAC;QAE9C,MAAM,QAAQ,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;QAE5C,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACtC,QAAQ,CAAC,OAAO,CACf;gBACC,OAAO,EAAE,GAAG,aAAa,IAAI,KAAK,KAAK,IAAI,EAAE;gBAC7C,qBAAqB,EAAE;oBACtB,OAAO,EAAE,WAAW;iBACpB;aACD,EACD,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACnB,IAAI,MAAM,KAAK,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE,EAAE;oBAC7C,MAAM,KAAK,GAA+B,OAAO,CAAC,CAAC,CAAC,CAAC;oBAErD,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;iBAC1C;qBAAM;oBACN,OAAO,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;iBAC5B;YACF,CAAC,CACD,CAAC;QACH,CAAC,CAAC,CAAC;IACJ,CAAC;CACD;;YAjPsC,qDAAM;;AADhC,sBAAsB;IADlC,gEAAU,EAAE;mFAE0B,qDAAM;GADhC,sBAAsB,CAkPlC;AAlPkC;;;;;;;;;;;;;;;;;;;;;;;;ACtBK;AACG;AAGb;AACc;AAMiC;AAEG;AAShF,IAAa,cAAc,GAA3B,MAAa,cAAc;IAC1B,YAA6B,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;QAEnC,aAAQ,GAAyB,IAAI,CAAC,MAAM;aAClD,UAAU,CAAwB;YAClC,KAAK,EAAE,kDAAG;;;;;;;;;;;;;;;;;;IAkBT;YACD,YAAY,EAAE,IAAI;SAClB,CAAC;aACD,YAAY,CAAC,IAAI,CACjB,0DAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,EAC9B,4DAAK,EAAE,CACP,CAAC;IA5B2C,CAAC;IA8B/C,qBAAqB;QACpB,OAAO,IAAI,CAAC,QAAQ,CAAC;IACtB,CAAC;IAED,UAAU,CAAC,aAA8B;QACxC,OAAO,IAAI,CAAC,MAAM;aAChB,UAAU,CAAwB;YAClC,KAAK,EAAE,kDAAG;;;;;;;;;;;;;;;;;;KAkBT;YACD,SAAS,EAAE,EAAE,aAAa,EAAE;YAC5B,YAAY,EAAE,IAAI;SAClB,CAAC;aACD,YAAY,CAAC,IAAI,CACjB,0DAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,EAC9B,4DAAK,EAAE,CACP,CAAC;IACJ,CAAC;IAED,YAAY,CAAC,WAAgC;QAC5C,OAAO,IAAI,CAAC,MAAM;aAChB,MAAM,CAAuC;YAC7C,QAAQ,EAAE,kDAAG;;;;;;KAMZ;YACD,SAAS,EAAE;gBACV,WAAW;aACX;SACD,CAAC;aACD,IAAI,CACJ,0DAAG,CAAC,CAAC,MAAW,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,EAC9C,4DAAK,EAAE,CACP,CAAC;IACJ,CAAC;IAED,WAAW,CAAC,GAAa;QACxB,OAAO,IAAI,CAAC,MAAM;aAChB,MAAM,CAAC;YACP,QAAQ,EAAE,kDAAG;;;;;;KAMZ;YACD,SAAS,EAAE,EAAE,GAAG,EAAE;SAClB,CAAC;aACD,IAAI,CACJ,0DAAG,CAAC,CAAC,MAAW,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,EACpD,4DAAK,EAAE,CACP,CAAC;IACJ,CAAC;IAED,YAAY,CACX,EAAU,EACV,WAAgC;QAEhC,OAAO,IAAI,CAAC,MAAM;aAChB,MAAM,CAAmD;YACzD,QAAQ,EAAE,kDAAG;;;;;;;;;KASZ;YACD,SAAS,EAAE;gBACV,EAAE;gBACF,WAAW;aACX;SACD,CAAC;aACD,IAAI,CACJ,0DAAG,CAAC,CAAC,MAAW,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,EAC9C,4DAAK,EAAE,CACP,CAAC;IACJ,CAAC;IAEK,qBAAqB,CAAC,IAAqB;;YAChD,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,kBAAkB,CACxC,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,IAAI,EACT,MAAM,CAAC,MAAM,CAAC,6FAAS,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAC9C,CAAC;YAEF,MAAM,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAC1C,MAAM,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAE1C,MAAM,WAAW,GAA6B;gBAC7C,SAAS,EAAE,MAAM,CAAC,MAAM,CAAC,6FAAS,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC;gBACzD,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,aAAa,EAAE,IAAI,CAAC,OAAO;gBAC3B,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,GAAG,EAAE;oBACJ,WAAW,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;oBACvC,IAAI,EAAE,OAAO;iBACb;aACD,CAAC;YAEF,MAAM,MAAM,GAAwB;gBACnC,IAAI,EAAE,IAAI,CAAC,MAAM;gBACjB,SAAS,EAAE,IAAI,CAAC,SAAS;gBACzB,WAAW;aACX,CAAC;YAEF,OAAO,MAAM,CAAC;QACf,CAAC;KAAA;IAEK,iBAAiB;;YACtB,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,MAAM;iBAC3B,KAAK,CAAC;gBACN,KAAK,EAAE,kDAAG;;;;KAIT;aACD,CAAC;iBACD,SAAS,EAAE,CAAC;YAEd,OAAO,GAAG,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QACtC,CAAC;KAAA;IAED,4CAA4C,CAC3C,UAAkB,EAClB,UAAkB;QAElB,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;YACxB,KAAK,EAAE,kDAAG;;;;;;;;;;IAUT;YACD,SAAS,EAAE,EAAE,UAAU,EAAE,UAAU,EAAE;SACrC,CAAC,CAAC;IACJ,CAAC;IAEO,kBAAkB,CACzB,KAAa,EACb,aAAqB,EACrB,IAAY,EACZ,SAAiB;QAEjB,MAAM,WAAW,GAAG,kGAAc,CAAC,SAAS,CAAC,CAAC;QAE9C,MAAM,QAAQ,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;QAE5C,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACtC,QAAQ,CAAC,OAAO,CACf;gBACC,OAAO,EAAE,GAAG,aAAa,IAAI,KAAK,KAAK,IAAI,EAAE;gBAC7C,qBAAqB,EAAE;oBACtB,OAAO,EAAE,WAAW;iBACpB;aACD,EACD,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACnB,IAAI,MAAM,KAAK,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE,EAAE;oBAC7C,MAAM,KAAK,GAA+B,OAAO,CAAC,CAAC,CAAC,CAAC;oBAErD,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;iBAC1C;qBAAM;oBACN,OAAO,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;iBAC5B;YACF,CAAC,CACD,CAAC;QACH,CAAC,CAAC,CAAC;IACJ,CAAC;CACD;;YAjOqC,qDAAM;;AAD/B,cAAc;IAD1B,gEAAU,EAAE;mFAEyB,qDAAM;GAD/B,cAAc,CAkO1B;AAlO0B","file":"default~app-pages-fakeData-fakeData-module~invites-invites-module-es2015.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport InviteRequest from '@modules/server.common/entities/InviteRequest';\nimport { Apollo } from 'apollo-angular';\nimport { map, share } from 'rxjs/operators';\nimport gql from 'graphql-tag';\nimport {\n\tIInviteRequestCreateObject,\n\tIInviteRequestUpdateObject,\n} from '@modules/server.common/interfaces/IInviteRequest';\nimport { getCountryName } from '@modules/server.common/entities/GeoLocation';\nimport { IGeoLocationCreateObject } from '@modules/server.common/interfaces/IGeoLocation';\nimport { InviteRequestViewModel } from '../../pages/+customers/+invites/+invites-requests/invites-requests.component';\nimport { countries } from '@modules/server.common/data/abbreviation-to-country';\nimport IPagingOptions from '@modules/server.common/interfaces/IPagingOptions';\n\ninterface RemovedObject {\n\tn: number;\n\tok: number;\n}\n\n@Injectable()\nexport class InvitesRequestsService {\n\tconstructor(private readonly _apollo: Apollo) {}\n\n\tprivate invitesRequests$: Observable<InviteRequest[]> = this._apollo\n\t\t.watchQuery<{ invitesRequests: InviteRequest[] }>({\n\t\t\tquery: gql`\n\t\t\t\tquery allInvitesRequests {\n\t\t\t\t\tinvitesRequests {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tgeoLocation {\n\t\t\t\t\t\t\tcity\n\t\t\t\t\t\t\tstreetAddress\n\t\t\t\t\t\t\thouse\n\t\t\t\t\t\t\tcountryId\n\t\t\t\t\t\t\tloc {\n\t\t\t\t\t\t\t\tcoordinates\n\t\t\t\t\t\t\t\ttype\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tisInvited\n\t\t\t\t\t\tinvitedDate\n\t\t\t\t\t\tapartment\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t`,\n\t\t\tpollInterval: 2000,\n\t\t})\n\t\t.valueChanges.pipe(\n\t\t\tmap((res) => res.data.invitesRequests),\n\t\t\tshare()\n\t\t);\n\n\tgetAllInvitesRequests(): Observable<InviteRequest[]> {\n\t\treturn this.invitesRequests$;\n\t}\n\n\tgetInvitesRequests(\n\t\tpagingOptions?: IPagingOptions,\n\t\tinvited?: boolean\n\t): Observable<InviteRequest[]> {\n\t\treturn this._apollo\n\t\t\t.watchQuery<{ invitesRequests: InviteRequest[] }>({\n\t\t\t\tquery: gql`\n\t\t\t\t\tquery AllInvitesRequests(\n\t\t\t\t\t\t$pagingOptions: PagingOptionsInput\n\t\t\t\t\t\t$invited: Boolean\n\t\t\t\t\t) {\n\t\t\t\t\t\tinvitesRequests(\n\t\t\t\t\t\t\tpagingOptions: $pagingOptions\n\t\t\t\t\t\t\tinvited: $invited\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tgeoLocation {\n\t\t\t\t\t\t\t\tcity\n\t\t\t\t\t\t\t\tstreetAddress\n\t\t\t\t\t\t\t\thouse\n\t\t\t\t\t\t\t\tcountryId\n\t\t\t\t\t\t\t\tloc {\n\t\t\t\t\t\t\t\t\tcoordinates\n\t\t\t\t\t\t\t\t\ttype\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tisInvited\n\t\t\t\t\t\t\tinvitedDate\n\t\t\t\t\t\t\tapartment\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t`,\n\t\t\t\tvariables: { pagingOptions, invited },\n\t\t\t\tpollInterval: 2000,\n\t\t\t})\n\t\t\t.valueChanges.pipe(\n\t\t\t\tmap((res) => res.data.invitesRequests),\n\t\t\t\tshare()\n\t\t\t);\n\t}\n\n\tcreateInviteRequest(\n\t\tcreateInput: IInviteRequestCreateObject\n\t): Observable<InviteRequest> {\n\t\treturn this._apollo\n\t\t\t.mutate<{ createInput: IInviteRequestCreateObject }>({\n\t\t\t\tmutation: gql`\n\t\t\t\t\tmutation CreateInviteRequest(\n\t\t\t\t\t\t$createInput: InviteRequestCreateInput!\n\t\t\t\t\t) {\n\t\t\t\t\t\tcreateInviteRequest(createInput: $createInput) {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t`,\n\t\t\t\tvariables: {\n\t\t\t\t\tcreateInput,\n\t\t\t\t},\n\t\t\t})\n\t\t\t.pipe(\n\t\t\t\tmap((result: any) => result.data.createInviteRequest),\n\t\t\t\tshare()\n\t\t\t);\n\t}\n\n\tremoveByIds(ids: string[]): Observable<RemovedObject> {\n\t\treturn this._apollo\n\t\t\t.mutate({\n\t\t\t\tmutation: gql`\n\t\t\t\t\tmutation RemoveInvitesRequestsByIds($ids: [String!]!) {\n\t\t\t\t\t\tremoveInvitesRequestsByIds(ids: $ids) {\n\t\t\t\t\t\t\tn\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t`,\n\t\t\t\tvariables: { ids },\n\t\t\t})\n\t\t\t.pipe(\n\t\t\t\tmap((result: any) => result.data.removeInvitesRequestsByIds),\n\t\t\t\tshare()\n\t\t\t);\n\t}\n\n\tupdateInviteRequest(\n\t\tid: string,\n\t\tupdateInput: IInviteRequestUpdateObject\n\t): Observable<InviteRequest> {\n\t\treturn this._apollo\n\t\t\t.mutate<{ id: string; updateInput: IInviteRequestUpdateObject }>({\n\t\t\t\tmutation: gql`\n\t\t\t\t\tmutation UpdateInviteRequest(\n\t\t\t\t\t\t$id: String!\n\t\t\t\t\t\t$updateInput: InviteRequestUpdateInput!\n\t\t\t\t\t) {\n\t\t\t\t\t\tupdateInviteRequest(\n\t\t\t\t\t\t\tid: $id\n\t\t\t\t\t\t\tupdateInput: $updateInput\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t`,\n\t\t\t\tvariables: {\n\t\t\t\t\tid,\n\t\t\t\t\tupdateInput,\n\t\t\t\t},\n\t\t\t})\n\t\t\t.pipe(\n\t\t\t\tmap((result: any) => result.data.updateInviteRequest),\n\t\t\t\tshare()\n\t\t\t);\n\t}\n\n\tasync getCreateInviteRequestObject(data: InviteRequestViewModel) {\n\t\tconst res = await this._tryFindNewAddress(\n\t\t\tdata.house,\n\t\t\tdata.address,\n\t\t\tdata.city,\n\t\t\tObject.values(countries).indexOf(data.country)\n\t\t);\n\n\t\tconst lat = Number(res['lat']).toFixed(7);\n\t\tconst lng = Number(res['lng']).toFixed(7);\n\n\t\tconst geoLocation: IGeoLocationCreateObject = {\n\t\t\tcountryId: Object.values(countries).indexOf(data.country),\n\t\t\tcity: data.city,\n\t\t\tstreetAddress: data.address,\n\t\t\thouse: data.house,\n\t\t\tloc: {\n\t\t\t\tcoordinates: [Number(lng), Number(lat)],\n\t\t\t\ttype: 'Point',\n\t\t\t},\n\t\t};\n\n\t\tconst inviteRequest: IInviteRequestCreateObject = {\n\t\t\tapartment: data.apartment,\n\t\t\tisManual: true,\n\t\t\tgeoLocation,\n\t\t};\n\n\t\treturn inviteRequest;\n\t}\n\n\tgenerate1000InviteRequests(defaultLng: number, defaultLat: number): any {\n\t\treturn this._apollo.query({\n\t\t\tquery: gql`\n\t\t\t\tquery Generate1000InviteRequests(\n\t\t\t\t\t$defaultLng: Float!\n\t\t\t\t\t$defaultLat: Float!\n\t\t\t\t) {\n\t\t\t\t\tgenerate1000InviteRequests(\n\t\t\t\t\t\tdefaultLng: $defaultLng\n\t\t\t\t\t\tdefaultLat: $defaultLat\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t`,\n\t\t\tvariables: { defaultLng, defaultLat },\n\t\t});\n\t}\n\n\tasync getCountOfInvitesRequests(invited?: boolean) {\n\t\tconst res = await this._apollo\n\t\t\t.query({\n\t\t\t\tquery: gql`\n\t\t\t\t\tquery GetCountOfInvitesRequests($invited: Boolean) {\n\t\t\t\t\t\tgetCountOfInvitesRequests(invited: $invited)\n\t\t\t\t\t}\n\t\t\t\t`,\n\t\t\t\tvariables: { invited },\n\t\t\t})\n\t\t\t.toPromise();\n\n\t\treturn res.data['getCountOfInvitesRequests'];\n\t}\n\n\tprivate _tryFindNewAddress(\n\t\thouse: string,\n\t\tstreetAddress: string,\n\t\tcity: string,\n\t\tcountryId: number\n\t) {\n\t\tconst countryName = getCountryName(countryId);\n\n\t\tconst geocoder = new google.maps.Geocoder();\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tgeocoder.geocode(\n\t\t\t\t{\n\t\t\t\t\taddress: `${streetAddress} ${house}, ${city}`,\n\t\t\t\t\tcomponentRestrictions: {\n\t\t\t\t\t\tcountry: countryName,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t(results, status) => {\n\t\t\t\t\tif (status === google.maps.GeocoderStatus.OK) {\n\t\t\t\t\t\tconst place: google.maps.GeocoderResult = results[0];\n\n\t\t\t\t\t\tresolve(place.geometry.location.toJSON());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve({ lat: 0, lng: 0 });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\n","import { Apollo } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport Invite from '@modules/server.common/entities/Invite';\nimport gql from 'graphql-tag';\nimport { map, share } from 'rxjs/operators';\nimport {\n\tIInviteUpdateObject,\n\tIInviteCreateObject,\n} from '@modules/server.common/interfaces/IInvite';\nimport { InviteViewModel } from '../../pages/+customers/+invites/invites.component';\nimport { getCountryName } from '@modules/server.common/entities/GeoLocation';\nimport { IGeoLocationCreateObject } from '@modules/server.common/interfaces/IGeoLocation';\nimport { countries } from '@modules/server.common/data/abbreviation-to-country';\nimport IPagingOptions from '@modules/server.common/interfaces/IPagingOptions';\n\ninterface RemovedObject {\n\tn: number;\n\tok: number;\n}\n\n@Injectable()\nexport class InvitesService {\n\tconstructor(private readonly apollo: Apollo) {}\n\n\tprivate invites$: Observable<Invite[]> = this.apollo\n\t\t.watchQuery<{ invites: Invite[] }>({\n\t\t\tquery: gql`\n\t\t\t\tquery allInvites {\n\t\t\t\t\tinvites {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tcode\n\t\t\t\t\t\tgeoLocation {\n\t\t\t\t\t\t\tcity\n\t\t\t\t\t\t\tstreetAddress\n\t\t\t\t\t\t\thouse\n\t\t\t\t\t\t\tcountryId\n\t\t\t\t\t\t\tloc {\n\t\t\t\t\t\t\t\tcoordinates\n\t\t\t\t\t\t\t\ttype\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tapartment\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t`,\n\t\t\tpollInterval: 2000,\n\t\t})\n\t\t.valueChanges.pipe(\n\t\t\tmap((res) => res.data.invites),\n\t\t\tshare()\n\t\t);\n\n\tgetAllInvitesRequests(): Observable<Invite[]> {\n\t\treturn this.invites$;\n\t}\n\n\tgetInvites(pagingOptions?: IPagingOptions): Observable<Invite[]> {\n\t\treturn this.apollo\n\t\t\t.watchQuery<{ invites: Invite[] }>({\n\t\t\t\tquery: gql`\n\t\t\t\t\tquery AllInvites($pagingOptions: PagingOptionsInput) {\n\t\t\t\t\t\tinvites(pagingOptions: $pagingOptions) {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tcode\n\t\t\t\t\t\t\tgeoLocation {\n\t\t\t\t\t\t\t\tcity\n\t\t\t\t\t\t\t\tstreetAddress\n\t\t\t\t\t\t\t\thouse\n\t\t\t\t\t\t\t\tcountryId\n\t\t\t\t\t\t\t\tloc {\n\t\t\t\t\t\t\t\t\tcoordinates\n\t\t\t\t\t\t\t\t\ttype\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tapartment\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t`,\n\t\t\t\tvariables: { pagingOptions },\n\t\t\t\tpollInterval: 2000,\n\t\t\t})\n\t\t\t.valueChanges.pipe(\n\t\t\t\tmap((res) => res.data.invites),\n\t\t\t\tshare()\n\t\t\t);\n\t}\n\n\tcreateInvite(createInput: IInviteCreateObject): Observable<Invite> {\n\t\treturn this.apollo\n\t\t\t.mutate<{ createInput: IInviteCreateObject }>({\n\t\t\t\tmutation: gql`\n\t\t\t\t\tmutation CreateInvite($createInput: InviteCreateInput!) {\n\t\t\t\t\t\tcreateInvite(createInput: $createInput) {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t`,\n\t\t\t\tvariables: {\n\t\t\t\t\tcreateInput,\n\t\t\t\t},\n\t\t\t})\n\t\t\t.pipe(\n\t\t\t\tmap((result: any) => result.data.createInvite),\n\t\t\t\tshare()\n\t\t\t);\n\t}\n\n\tremoveByIds(ids: string[]): Observable<RemovedObject> {\n\t\treturn this.apollo\n\t\t\t.mutate({\n\t\t\t\tmutation: gql`\n\t\t\t\t\tmutation RemoveInvitesByIds($ids: [String!]!) {\n\t\t\t\t\t\tremoveInvitesByIds(ids: $ids) {\n\t\t\t\t\t\t\tn\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t`,\n\t\t\t\tvariables: { ids },\n\t\t\t})\n\t\t\t.pipe(\n\t\t\t\tmap((result: any) => result.data.removeInvitesByIds),\n\t\t\t\tshare()\n\t\t\t);\n\t}\n\n\tupdateInvite(\n\t\tid: string,\n\t\tupdateInput: IInviteUpdateObject\n\t): Observable<Invite> {\n\t\treturn this.apollo\n\t\t\t.mutate<{ id: string; updateInput: IInviteUpdateObject }>({\n\t\t\t\tmutation: gql`\n\t\t\t\t\tmutation UpdateInvite(\n\t\t\t\t\t\t$id: String!\n\t\t\t\t\t\t$updateInput: InviteUpdateInput!\n\t\t\t\t\t) {\n\t\t\t\t\t\tupdateInvite(id: $id, updateInput: $updateInput) {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t`,\n\t\t\t\tvariables: {\n\t\t\t\t\tid,\n\t\t\t\t\tupdateInput,\n\t\t\t\t},\n\t\t\t})\n\t\t\t.pipe(\n\t\t\t\tmap((result: any) => result.data.updateInvite),\n\t\t\t\tshare()\n\t\t\t);\n\t}\n\n\tasync getCreateInviteObject(data: InviteViewModel) {\n\t\tconst res = await this._tryFindNewAddress(\n\t\t\tdata.house,\n\t\t\tdata.address,\n\t\t\tdata.city,\n\t\t\tObject.values(countries).indexOf(data.country)\n\t\t);\n\n\t\tconst lat = Number(res['lat']).toFixed(7);\n\t\tconst lng = Number(res['lng']).toFixed(7);\n\n\t\tconst geoLocation: IGeoLocationCreateObject = {\n\t\t\tcountryId: Object.values(countries).indexOf(data.country),\n\t\t\tcity: data.city,\n\t\t\tstreetAddress: data.address,\n\t\t\thouse: data.house,\n\t\t\tloc: {\n\t\t\t\tcoordinates: [Number(lng), Number(lat)],\n\t\t\t\ttype: 'Point',\n\t\t\t},\n\t\t};\n\n\t\tconst invite: IInviteCreateObject = {\n\t\t\tcode: data.invite,\n\t\t\tapartment: data.apartment,\n\t\t\tgeoLocation,\n\t\t};\n\n\t\treturn invite;\n\t}\n\n\tasync getCountOfInvites() {\n\t\tconst res = await this.apollo\n\t\t\t.query({\n\t\t\t\tquery: gql`\n\t\t\t\t\tquery GetCountOfInvites {\n\t\t\t\t\t\tgetCountOfInvites\n\t\t\t\t\t}\n\t\t\t\t`,\n\t\t\t})\n\t\t\t.toPromise();\n\n\t\treturn res.data['getCountOfInvites'];\n\t}\n\n\tgenerate1000InvitesConnectedToInviteRequests(\n\t\tdefaultLng: number,\n\t\tdefaultLat: number\n\t) {\n\t\treturn this.apollo.query({\n\t\t\tquery: gql`\n\t\t\t\tquery Generate1000InvitesConnectedToInviteRequests(\n\t\t\t\t\t$defaultLng: Float!\n\t\t\t\t\t$defaultLat: Float!\n\t\t\t\t) {\n\t\t\t\t\tgenerate1000InvitesConnectedToInviteRequests(\n\t\t\t\t\t\tdefaultLng: $defaultLng\n\t\t\t\t\t\tdefaultLat: $defaultLat\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t`,\n\t\t\tvariables: { defaultLng, defaultLat },\n\t\t});\n\t}\n\n\tprivate _tryFindNewAddress(\n\t\thouse: string,\n\t\tstreetAddress: string,\n\t\tcity: string,\n\t\tcountryId: number\n\t) {\n\t\tconst countryName = getCountryName(countryId);\n\n\t\tconst geocoder = new google.maps.Geocoder();\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tgeocoder.geocode(\n\t\t\t\t{\n\t\t\t\t\taddress: `${streetAddress} ${house}, ${city}`,\n\t\t\t\t\tcomponentRestrictions: {\n\t\t\t\t\t\tcountry: countryName,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t(results, status) => {\n\t\t\t\t\tif (status === google.maps.GeocoderStatus.OK) {\n\t\t\t\t\t\tconst place: google.maps.GeocoderResult = results[0];\n\n\t\t\t\t\t\tresolve(place.geometry.location.toJSON());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve({ lat: 0, lng: 0 });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\n"],"sourceRoot":"webpack:///"}