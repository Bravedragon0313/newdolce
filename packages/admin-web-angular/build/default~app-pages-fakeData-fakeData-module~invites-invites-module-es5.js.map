{"version":3,"sources":["webpack:///src/app/@core/data/invites-requests.service.ts","webpack:///src/app/@core/data/invites.service.ts"],"names":["InvitesRequestsService","_apollo","invitesRequests$","watchQuery","query","pollInterval","valueChanges","pipe","res","data","invitesRequests","pagingOptions","invited","variables","createInput","mutate","mutation","result","createInviteRequest","ids","removeInvitesRequestsByIds","id","updateInput","updateInviteRequest","_tryFindNewAddress","house","address","city","Object","values","indexOf","country","lat","Number","toFixed","lng","geoLocation","countryId","streetAddress","loc","coordinates","type","inviteRequest","apartment","isManual","defaultLng","defaultLat","toPromise","countryName","geocoder","google","maps","Geocoder","Promise","resolve","reject","geocode","componentRestrictions","results","status","GeocoderStatus","OK","place","geometry","location","toJSON","InvitesService","apollo","invites$","invites","createInvite","removeInvitesByIds","updateInvite","invite","code"],"mappings":"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","file":"default~app-pages-fakeData-fakeData-module~invites-invites-module-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport InviteRequest from '@modules/server.common/entities/InviteRequest';\nimport { Apollo } from 'apollo-angular';\nimport { map, share } from 'rxjs/operators';\nimport gql from 'graphql-tag';\nimport {\n\tIInviteRequestCreateObject,\n\tIInviteRequestUpdateObject,\n} from '@modules/server.common/interfaces/IInviteRequest';\nimport { getCountryName } from '@modules/server.common/entities/GeoLocation';\nimport { IGeoLocationCreateObject } from '@modules/server.common/interfaces/IGeoLocation';\nimport { InviteRequestViewModel } from '../../pages/+customers/+invites/+invites-requests/invites-requests.component';\nimport { countries } from '@modules/server.common/data/abbreviation-to-country';\nimport IPagingOptions from '@modules/server.common/interfaces/IPagingOptions';\n\ninterface RemovedObject {\n\tn: number;\n\tok: number;\n}\n\n@Injectable()\nexport class InvitesRequestsService {\n\tconstructor(private readonly _apollo: Apollo) {}\n\n\tprivate invitesRequests$: Observable<InviteRequest[]> = this._apollo\n\t\t.watchQuery<{ invitesRequests: InviteRequest[] }>({\n\t\t\tquery: gql`\n\t\t\t\tquery allInvitesRequests {\n\t\t\t\t\tinvitesRequests {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tgeoLocation {\n\t\t\t\t\t\t\tcity\n\t\t\t\t\t\t\tstreetAddress\n\t\t\t\t\t\t\thouse\n\t\t\t\t\t\t\tcountryId\n\t\t\t\t\t\t\tloc {\n\t\t\t\t\t\t\t\tcoordinates\n\t\t\t\t\t\t\t\ttype\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tisInvited\n\t\t\t\t\t\tinvitedDate\n\t\t\t\t\t\tapartment\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t`,\n\t\t\tpollInterval: 2000,\n\t\t})\n\t\t.valueChanges.pipe(\n\t\t\tmap((res) => res.data.invitesRequests),\n\t\t\tshare()\n\t\t);\n\n\tgetAllInvitesRequests(): Observable<InviteRequest[]> {\n\t\treturn this.invitesRequests$;\n\t}\n\n\tgetInvitesRequests(\n\t\tpagingOptions?: IPagingOptions,\n\t\tinvited?: boolean\n\t): Observable<InviteRequest[]> {\n\t\treturn this._apollo\n\t\t\t.watchQuery<{ invitesRequests: InviteRequest[] }>({\n\t\t\t\tquery: gql`\n\t\t\t\t\tquery AllInvitesRequests(\n\t\t\t\t\t\t$pagingOptions: PagingOptionsInput\n\t\t\t\t\t\t$invited: Boolean\n\t\t\t\t\t) {\n\t\t\t\t\t\tinvitesRequests(\n\t\t\t\t\t\t\tpagingOptions: $pagingOptions\n\t\t\t\t\t\t\tinvited: $invited\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tgeoLocation {\n\t\t\t\t\t\t\t\tcity\n\t\t\t\t\t\t\t\tstreetAddress\n\t\t\t\t\t\t\t\thouse\n\t\t\t\t\t\t\t\tcountryId\n\t\t\t\t\t\t\t\tloc {\n\t\t\t\t\t\t\t\t\tcoordinates\n\t\t\t\t\t\t\t\t\ttype\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tisInvited\n\t\t\t\t\t\t\tinvitedDate\n\t\t\t\t\t\t\tapartment\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t`,\n\t\t\t\tvariables: { pagingOptions, invited },\n\t\t\t\tpollInterval: 2000,\n\t\t\t})\n\t\t\t.valueChanges.pipe(\n\t\t\t\tmap((res) => res.data.invitesRequests),\n\t\t\t\tshare()\n\t\t\t);\n\t}\n\n\tcreateInviteRequest(\n\t\tcreateInput: IInviteRequestCreateObject\n\t): Observable<InviteRequest> {\n\t\treturn this._apollo\n\t\t\t.mutate<{ createInput: IInviteRequestCreateObject }>({\n\t\t\t\tmutation: gql`\n\t\t\t\t\tmutation CreateInviteRequest(\n\t\t\t\t\t\t$createInput: InviteRequestCreateInput!\n\t\t\t\t\t) {\n\t\t\t\t\t\tcreateInviteRequest(createInput: $createInput) {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t`,\n\t\t\t\tvariables: {\n\t\t\t\t\tcreateInput,\n\t\t\t\t},\n\t\t\t})\n\t\t\t.pipe(\n\t\t\t\tmap((result: any) => result.data.createInviteRequest),\n\t\t\t\tshare()\n\t\t\t);\n\t}\n\n\tremoveByIds(ids: string[]): Observable<RemovedObject> {\n\t\treturn this._apollo\n\t\t\t.mutate({\n\t\t\t\tmutation: gql`\n\t\t\t\t\tmutation RemoveInvitesRequestsByIds($ids: [String!]!) {\n\t\t\t\t\t\tremoveInvitesRequestsByIds(ids: $ids) {\n\t\t\t\t\t\t\tn\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t`,\n\t\t\t\tvariables: { ids },\n\t\t\t})\n\t\t\t.pipe(\n\t\t\t\tmap((result: any) => result.data.removeInvitesRequestsByIds),\n\t\t\t\tshare()\n\t\t\t);\n\t}\n\n\tupdateInviteRequest(\n\t\tid: string,\n\t\tupdateInput: IInviteRequestUpdateObject\n\t): Observable<InviteRequest> {\n\t\treturn this._apollo\n\t\t\t.mutate<{ id: string; updateInput: IInviteRequestUpdateObject }>({\n\t\t\t\tmutation: gql`\n\t\t\t\t\tmutation UpdateInviteRequest(\n\t\t\t\t\t\t$id: String!\n\t\t\t\t\t\t$updateInput: InviteRequestUpdateInput!\n\t\t\t\t\t) {\n\t\t\t\t\t\tupdateInviteRequest(\n\t\t\t\t\t\t\tid: $id\n\t\t\t\t\t\t\tupdateInput: $updateInput\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t`,\n\t\t\t\tvariables: {\n\t\t\t\t\tid,\n\t\t\t\t\tupdateInput,\n\t\t\t\t},\n\t\t\t})\n\t\t\t.pipe(\n\t\t\t\tmap((result: any) => result.data.updateInviteRequest),\n\t\t\t\tshare()\n\t\t\t);\n\t}\n\n\tasync getCreateInviteRequestObject(data: InviteRequestViewModel) {\n\t\tconst res = await this._tryFindNewAddress(\n\t\t\tdata.house,\n\t\t\tdata.address,\n\t\t\tdata.city,\n\t\t\tObject.values(countries).indexOf(data.country)\n\t\t);\n\n\t\tconst lat = Number(res['lat']).toFixed(7);\n\t\tconst lng = Number(res['lng']).toFixed(7);\n\n\t\tconst geoLocation: IGeoLocationCreateObject = {\n\t\t\tcountryId: Object.values(countries).indexOf(data.country),\n\t\t\tcity: data.city,\n\t\t\tstreetAddress: data.address,\n\t\t\thouse: data.house,\n\t\t\tloc: {\n\t\t\t\tcoordinates: [Number(lng), Number(lat)],\n\t\t\t\ttype: 'Point',\n\t\t\t},\n\t\t};\n\n\t\tconst inviteRequest: IInviteRequestCreateObject = {\n\t\t\tapartment: data.apartment,\n\t\t\tisManual: true,\n\t\t\tgeoLocation,\n\t\t};\n\n\t\treturn inviteRequest;\n\t}\n\n\tgenerate1000InviteRequests(defaultLng: number, defaultLat: number): any {\n\t\treturn this._apollo.query({\n\t\t\tquery: gql`\n\t\t\t\tquery Generate1000InviteRequests(\n\t\t\t\t\t$defaultLng: Float!\n\t\t\t\t\t$defaultLat: Float!\n\t\t\t\t) {\n\t\t\t\t\tgenerate1000InviteRequests(\n\t\t\t\t\t\tdefaultLng: $defaultLng\n\t\t\t\t\t\tdefaultLat: $defaultLat\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t`,\n\t\t\tvariables: { defaultLng, defaultLat },\n\t\t});\n\t}\n\n\tasync getCountOfInvitesRequests(invited?: boolean) {\n\t\tconst res = await this._apollo\n\t\t\t.query({\n\t\t\t\tquery: gql`\n\t\t\t\t\tquery GetCountOfInvitesRequests($invited: Boolean) {\n\t\t\t\t\t\tgetCountOfInvitesRequests(invited: $invited)\n\t\t\t\t\t}\n\t\t\t\t`,\n\t\t\t\tvariables: { invited },\n\t\t\t})\n\t\t\t.toPromise();\n\n\t\treturn res.data['getCountOfInvitesRequests'];\n\t}\n\n\tprivate _tryFindNewAddress(\n\t\thouse: string,\n\t\tstreetAddress: string,\n\t\tcity: string,\n\t\tcountryId: number\n\t) {\n\t\tconst countryName = getCountryName(countryId);\n\n\t\tconst geocoder = new google.maps.Geocoder();\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tgeocoder.geocode(\n\t\t\t\t{\n\t\t\t\t\taddress: `${streetAddress} ${house}, ${city}`,\n\t\t\t\t\tcomponentRestrictions: {\n\t\t\t\t\t\tcountry: countryName,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t(results, status) => {\n\t\t\t\t\tif (status === google.maps.GeocoderStatus.OK) {\n\t\t\t\t\t\tconst place: google.maps.GeocoderResult = results[0];\n\n\t\t\t\t\t\tresolve(place.geometry.location.toJSON());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve({ lat: 0, lng: 0 });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\n","import { Apollo } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport Invite from '@modules/server.common/entities/Invite';\nimport gql from 'graphql-tag';\nimport { map, share } from 'rxjs/operators';\nimport {\n\tIInviteUpdateObject,\n\tIInviteCreateObject,\n} from '@modules/server.common/interfaces/IInvite';\nimport { InviteViewModel } from '../../pages/+customers/+invites/invites.component';\nimport { getCountryName } from '@modules/server.common/entities/GeoLocation';\nimport { IGeoLocationCreateObject } from '@modules/server.common/interfaces/IGeoLocation';\nimport { countries } from '@modules/server.common/data/abbreviation-to-country';\nimport IPagingOptions from '@modules/server.common/interfaces/IPagingOptions';\n\ninterface RemovedObject {\n\tn: number;\n\tok: number;\n}\n\n@Injectable()\nexport class InvitesService {\n\tconstructor(private readonly apollo: Apollo) {}\n\n\tprivate invites$: Observable<Invite[]> = this.apollo\n\t\t.watchQuery<{ invites: Invite[] }>({\n\t\t\tquery: gql`\n\t\t\t\tquery allInvites {\n\t\t\t\t\tinvites {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tcode\n\t\t\t\t\t\tgeoLocation {\n\t\t\t\t\t\t\tcity\n\t\t\t\t\t\t\tstreetAddress\n\t\t\t\t\t\t\thouse\n\t\t\t\t\t\t\tcountryId\n\t\t\t\t\t\t\tloc {\n\t\t\t\t\t\t\t\tcoordinates\n\t\t\t\t\t\t\t\ttype\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tapartment\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t`,\n\t\t\tpollInterval: 2000,\n\t\t})\n\t\t.valueChanges.pipe(\n\t\t\tmap((res) => res.data.invites),\n\t\t\tshare()\n\t\t);\n\n\tgetAllInvitesRequests(): Observable<Invite[]> {\n\t\treturn this.invites$;\n\t}\n\n\tgetInvites(pagingOptions?: IPagingOptions): Observable<Invite[]> {\n\t\treturn this.apollo\n\t\t\t.watchQuery<{ invites: Invite[] }>({\n\t\t\t\tquery: gql`\n\t\t\t\t\tquery AllInvites($pagingOptions: PagingOptionsInput) {\n\t\t\t\t\t\tinvites(pagingOptions: $pagingOptions) {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tcode\n\t\t\t\t\t\t\tgeoLocation {\n\t\t\t\t\t\t\t\tcity\n\t\t\t\t\t\t\t\tstreetAddress\n\t\t\t\t\t\t\t\thouse\n\t\t\t\t\t\t\t\tcountryId\n\t\t\t\t\t\t\t\tloc {\n\t\t\t\t\t\t\t\t\tcoordinates\n\t\t\t\t\t\t\t\t\ttype\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tapartment\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t`,\n\t\t\t\tvariables: { pagingOptions },\n\t\t\t\tpollInterval: 2000,\n\t\t\t})\n\t\t\t.valueChanges.pipe(\n\t\t\t\tmap((res) => res.data.invites),\n\t\t\t\tshare()\n\t\t\t);\n\t}\n\n\tcreateInvite(createInput: IInviteCreateObject): Observable<Invite> {\n\t\treturn this.apollo\n\t\t\t.mutate<{ createInput: IInviteCreateObject }>({\n\t\t\t\tmutation: gql`\n\t\t\t\t\tmutation CreateInvite($createInput: InviteCreateInput!) {\n\t\t\t\t\t\tcreateInvite(createInput: $createInput) {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t`,\n\t\t\t\tvariables: {\n\t\t\t\t\tcreateInput,\n\t\t\t\t},\n\t\t\t})\n\t\t\t.pipe(\n\t\t\t\tmap((result: any) => result.data.createInvite),\n\t\t\t\tshare()\n\t\t\t);\n\t}\n\n\tremoveByIds(ids: string[]): Observable<RemovedObject> {\n\t\treturn this.apollo\n\t\t\t.mutate({\n\t\t\t\tmutation: gql`\n\t\t\t\t\tmutation RemoveInvitesByIds($ids: [String!]!) {\n\t\t\t\t\t\tremoveInvitesByIds(ids: $ids) {\n\t\t\t\t\t\t\tn\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t`,\n\t\t\t\tvariables: { ids },\n\t\t\t})\n\t\t\t.pipe(\n\t\t\t\tmap((result: any) => result.data.removeInvitesByIds),\n\t\t\t\tshare()\n\t\t\t);\n\t}\n\n\tupdateInvite(\n\t\tid: string,\n\t\tupdateInput: IInviteUpdateObject\n\t): Observable<Invite> {\n\t\treturn this.apollo\n\t\t\t.mutate<{ id: string; updateInput: IInviteUpdateObject }>({\n\t\t\t\tmutation: gql`\n\t\t\t\t\tmutation UpdateInvite(\n\t\t\t\t\t\t$id: String!\n\t\t\t\t\t\t$updateInput: InviteUpdateInput!\n\t\t\t\t\t) {\n\t\t\t\t\t\tupdateInvite(id: $id, updateInput: $updateInput) {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t`,\n\t\t\t\tvariables: {\n\t\t\t\t\tid,\n\t\t\t\t\tupdateInput,\n\t\t\t\t},\n\t\t\t})\n\t\t\t.pipe(\n\t\t\t\tmap((result: any) => result.data.updateInvite),\n\t\t\t\tshare()\n\t\t\t);\n\t}\n\n\tasync getCreateInviteObject(data: InviteViewModel) {\n\t\tconst res = await this._tryFindNewAddress(\n\t\t\tdata.house,\n\t\t\tdata.address,\n\t\t\tdata.city,\n\t\t\tObject.values(countries).indexOf(data.country)\n\t\t);\n\n\t\tconst lat = Number(res['lat']).toFixed(7);\n\t\tconst lng = Number(res['lng']).toFixed(7);\n\n\t\tconst geoLocation: IGeoLocationCreateObject = {\n\t\t\tcountryId: Object.values(countries).indexOf(data.country),\n\t\t\tcity: data.city,\n\t\t\tstreetAddress: data.address,\n\t\t\thouse: data.house,\n\t\t\tloc: {\n\t\t\t\tcoordinates: [Number(lng), Number(lat)],\n\t\t\t\ttype: 'Point',\n\t\t\t},\n\t\t};\n\n\t\tconst invite: IInviteCreateObject = {\n\t\t\tcode: data.invite,\n\t\t\tapartment: data.apartment,\n\t\t\tgeoLocation,\n\t\t};\n\n\t\treturn invite;\n\t}\n\n\tasync getCountOfInvites() {\n\t\tconst res = await this.apollo\n\t\t\t.query({\n\t\t\t\tquery: gql`\n\t\t\t\t\tquery GetCountOfInvites {\n\t\t\t\t\t\tgetCountOfInvites\n\t\t\t\t\t}\n\t\t\t\t`,\n\t\t\t})\n\t\t\t.toPromise();\n\n\t\treturn res.data['getCountOfInvites'];\n\t}\n\n\tgenerate1000InvitesConnectedToInviteRequests(\n\t\tdefaultLng: number,\n\t\tdefaultLat: number\n\t) {\n\t\treturn this.apollo.query({\n\t\t\tquery: gql`\n\t\t\t\tquery Generate1000InvitesConnectedToInviteRequests(\n\t\t\t\t\t$defaultLng: Float!\n\t\t\t\t\t$defaultLat: Float!\n\t\t\t\t) {\n\t\t\t\t\tgenerate1000InvitesConnectedToInviteRequests(\n\t\t\t\t\t\tdefaultLng: $defaultLng\n\t\t\t\t\t\tdefaultLat: $defaultLat\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t`,\n\t\t\tvariables: { defaultLng, defaultLat },\n\t\t});\n\t}\n\n\tprivate _tryFindNewAddress(\n\t\thouse: string,\n\t\tstreetAddress: string,\n\t\tcity: string,\n\t\tcountryId: number\n\t) {\n\t\tconst countryName = getCountryName(countryId);\n\n\t\tconst geocoder = new google.maps.Geocoder();\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tgeocoder.geocode(\n\t\t\t\t{\n\t\t\t\t\taddress: `${streetAddress} ${house}, ${city}`,\n\t\t\t\t\tcomponentRestrictions: {\n\t\t\t\t\t\tcountry: countryName,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t(results, status) => {\n\t\t\t\t\tif (status === google.maps.GeocoderStatus.OK) {\n\t\t\t\t\t\tconst place: google.maps.GeocoderResult = results[0];\n\n\t\t\t\t\t\tresolve(place.geometry.location.toJSON());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve({ lat: 0, lng: 0 });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\n"]}