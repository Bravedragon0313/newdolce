{"version":3,"sources":["webpack:///src/app/@shared/payment-gateways/payPal-gateway/payPal-gateway.component.html","webpack:///src/app/@shared/payment-gateways/payment-gateways.component.html","webpack:///src/app/@shared/payment-gateways/stripe-gateway/stripe-gateway.component.html","webpack:///common/src/entities/Admin.ts","webpack:///common/src/entities/Currency.ts","webpack:///src/app/@core/data/currencies.service.ts","webpack:///src/app/@shared/payment-gateways/payPal-gateway/payPal-gateway.component.ts","webpack:///src/app/@shared/payment-gateways/payment-gateways.component.ts","webpack:///src/app/@shared/payment-gateways/payment-gateways.module.ts","webpack:///src/app/@shared/payment-gateways/stripe-gateway/stripe-gateway.component.ts"],"names":["Admin","type","String","unique","select","Boolean","required","validate","RegExp","name","Currency","countriesDefaultCurrencies","IL","RU","US","BG","CurrenciesService","apollo","currencies$","watchQuery","query","pollInterval","valueChanges","pipe","result","data","currencies","createInput","mutate","mutation","variables","createCurrency","PayPalGatewayComponent","PayPal","logo","currenciesCodes","configModel","currency","mode","publishableKey","secretKey","description","payPalTypes","isPayPalEnabled","isValid","payPalConfigForm","touched","dirty","valid","isFormValid","paymentGateway","configureObject","selector","template","PaymentGatewaysComponent","currenciesService","loadCurrenciesCodes","merchantCountry","warehouseCountry","defaultCurrency","toString","stripeGateway","isEdit","payPalGateway","getCurrencies","toPromise","res","map","r","currencyCode","merchant","paymentGateways","stripeConfigObj","find","g","Stripe","setValue","payPalConfigObj","isStripeEnabled","paymentsGateways","stripeGatewayCreateObject","createObject","payPalGatewayCreateObject","push","PaymentGatewaysModule","imports","forChild","declarations","exports","providers","StripeGatewayComponent","translateService","_ngDestroy$","COMPANY_BRAND_LOGO","payButtontext","companyBrandLogo","allowRememberMe","stream","subscribe","text","next","complete","stripeConfigForm","invalidUrl"],"mappings":"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","file":"default~app-pages-simulation-simulation-module~app-pages-warehouses-warehouses-module~customer-custo~5b7a2dbc-es5.js","sourcesContent":["export default \"<div class=\\\"row m-0\\\">\\n\\t<div class=\\\"form-group col-md-12 p-0\\\">\\n\\t\\t<nb-checkbox [(ngModel)]=\\\"isPayPalEnabled\\\">\\n\\t\\t\\t<img src=\\\"{{ logo }}\\\" width=\\\"20px\\\" alt=\\\"\\\" />\\n\\t\\t\\t{{ name }}\\n\\t\\t</nb-checkbox>\\n\\t</div>\\n</div>\\n\\n<form [hidden]=\\\"!isPayPalEnabled\\\" #payPalConfigForm=\\\"ngForm\\\">\\n\\t<div class=\\\"row m-0\\\">\\n\\t\\t<div class=\\\"form-group col-md-6\\\">\\n\\t\\t\\t<label for=\\\"mode\\\">\\n\\t\\t\\t\\t{{\\n\\t\\t\\t\\t\\t'FAKE_DATA.SETUP_MERCHANTS.PAYMENTS.PAYPAL.MODE' | translate\\n\\t\\t\\t\\t}}\\n\\t\\t\\t</label>\\n\\t\\t\\t<select\\n\\t\\t\\t\\t#mode=\\\"ngModel\\\"\\n\\t\\t\\t\\tname=\\\"mode\\\"\\n\\t\\t\\t\\t[(ngModel)]=\\\"configModel.mode\\\"\\n\\t\\t\\t\\tclass=\\\"form-control\\\"\\n\\t\\t\\t\\trequired\\n\\t\\t\\t>\\n\\t\\t\\t\\t<option value=\\\"\\\" disabled selected hidden>{{\\n\\t\\t\\t\\t\\t'FAKE_DATA.SETUP_MERCHANTS.PAYMENTS.PAYPAL.CHOOSE_PAYPAL_MODE'\\n\\t\\t\\t\\t\\t\\t| translate\\n\\t\\t\\t\\t}}</option>\\n\\t\\t\\t\\t<option *ngFor=\\\"let type of payPalTypes\\\" value=\\\"{{ type }}\\\">\\n\\t\\t\\t\\t\\t{{ type }}\\n\\t\\t\\t\\t</option>\\n\\t\\t\\t</select>\\n\\t\\t</div>\\n\\n\\t\\t<div class=\\\"form-group col-md-6\\\">\\n\\t\\t\\t<label for=\\\"currency\\\">\\n\\t\\t\\t\\t{{\\n\\t\\t\\t\\t\\t'FAKE_DATA.SETUP_MERCHANTS.PAYMENTS.PAYPAL.CURRENCY'\\n\\t\\t\\t\\t\\t\\t| translate\\n\\t\\t\\t\\t}}\\n\\t\\t\\t</label>\\n\\t\\t\\t<select\\n\\t\\t\\t\\t#currency=\\\"ngModel\\\"\\n\\t\\t\\t\\tname=\\\"currency\\\"\\n\\t\\t\\t\\t[(ngModel)]=\\\"configModel.currency\\\"\\n\\t\\t\\t\\tclass=\\\"form-control\\\"\\n\\t\\t\\t\\trequired\\n\\t\\t\\t>\\n\\t\\t\\t\\t<option value=\\\"\\\" disabled selected hidden>{{\\n\\t\\t\\t\\t\\t'FAKE_DATA.SETUP_MERCHANTS.PAYMENTS.PAYPAL.CHOOSE_CURRENCY_CODE'\\n\\t\\t\\t\\t\\t\\t| translate\\n\\t\\t\\t\\t}}</option>\\n\\t\\t\\t\\t<option\\n\\t\\t\\t\\t\\t*ngFor=\\\"let code of currenciesCodes\\\"\\n\\t\\t\\t\\t\\tvalue=\\\"{{ code }}\\\"\\n\\t\\t\\t\\t\\t>{{ code }}</option\\n\\t\\t\\t\\t>\\n\\t\\t\\t</select>\\n\\t\\t\\t<small\\n\\t\\t\\t\\tclass=\\\"text-danger\\\"\\n\\t\\t\\t\\t*ngIf=\\\"currency.invalid && (currency.dirty || currency.touched)\\\"\\n\\t\\t\\t>\\n\\t\\t\\t\\t<span *ngIf=\\\"currency.errors.required\\\">\\n\\t\\t\\t\\t\\t{{\\n\\t\\t\\t\\t\\t\\t'FAKE_DATA.SETUP_MERCHANTS.PAYMENTS.PAYPAL.CURRENCY_TEXT_IS_REQUIRED'\\n\\t\\t\\t\\t\\t\\t\\t| translate\\n\\t\\t\\t\\t\\t}}\\n\\t\\t\\t\\t</span>\\n\\t\\t\\t</small>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<div class=\\\"row m-0\\\">\\n\\t\\t<div class=\\\"form-group col-md-12\\\">\\n\\t\\t\\t<label for=\\\"publishableKey\\\">\\n\\t\\t\\t\\t{{\\n\\t\\t\\t\\t\\t'FAKE_DATA.SETUP_MERCHANTS.PAYMENTS.PAYPAL.PUBLISHABLE_KEY'\\n\\t\\t\\t\\t\\t\\t| translate\\n\\t\\t\\t\\t}}\\n\\t\\t\\t</label>\\n\\t\\t\\t<input\\n\\t\\t\\t\\tnbInput\\n\\t\\t\\t\\ttype=\\\"text\\\"\\n\\t\\t\\t\\tclass=\\\"form-control\\\"\\n\\t\\t\\t\\tid=\\\"publishableKey\\\"\\n\\t\\t\\t\\tname=\\\"publishable-key\\\"\\n\\t\\t\\t\\tplaceholder=\\\"{{\\n\\t\\t\\t\\t\\t'FAKE_DATA.SETUP_MERCHANTS.PAYMENTS.PAYPAL.PUBLISHABLE_KEY'\\n\\t\\t\\t\\t\\t\\t| translate\\n\\t\\t\\t\\t}}\\\"\\n\\t\\t\\t\\t[(ngModel)]=\\\"configModel.publishableKey\\\"\\n\\t\\t\\t\\t#publishableKey=\\\"ngModel\\\"\\n\\t\\t\\t\\t[ngClass]=\\\"{\\n\\t\\t\\t\\t\\t'input-danger':\\n\\t\\t\\t\\t\\t\\tpublishableKey.invalid &&\\n\\t\\t\\t\\t\\t\\t(publishableKey.dirty || publishableKey.touched),\\n\\t\\t\\t\\t\\t'input-success':\\n\\t\\t\\t\\t\\t\\tpublishableKey.valid &&\\n\\t\\t\\t\\t\\t\\t(publishableKey.dirty || publishableKey.touched)\\n\\t\\t\\t\\t}\\\"\\n\\t\\t\\t\\trequired\\n\\t\\t\\t/>\\n\\t\\t\\t<small\\n\\t\\t\\t\\tclass=\\\"text-danger\\\"\\n\\t\\t\\t\\t*ngIf=\\\"\\n\\t\\t\\t\\t\\tpublishableKey.invalid &&\\n\\t\\t\\t\\t\\t(publishableKey.dirty || publishableKey.touched)\\n\\t\\t\\t\\t\\\"\\n\\t\\t\\t>\\n\\t\\t\\t\\t<span *ngIf=\\\"publishableKey.errors.required\\\">\\n\\t\\t\\t\\t\\t{{\\n\\t\\t\\t\\t\\t\\t'FAKE_DATA.SETUP_MERCHANTS.PAYMENTS.PAYPAL.PUBLISHABLE_KEY_IS_REQUIRED'\\n\\t\\t\\t\\t\\t\\t\\t| translate\\n\\t\\t\\t\\t\\t}}\\n\\t\\t\\t\\t</span>\\n\\t\\t\\t</small>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<div class=\\\"row m-0\\\">\\n\\t\\t<div class=\\\"form-group col-md-12\\\">\\n\\t\\t\\t<label for=\\\"secretKey\\\">\\n\\t\\t\\t\\t{{\\n\\t\\t\\t\\t\\t'FAKE_DATA.SETUP_MERCHANTS.PAYMENTS.PAYPAL.SECRET_KEY'\\n\\t\\t\\t\\t\\t\\t| translate\\n\\t\\t\\t\\t}}\\n\\t\\t\\t</label>\\n\\t\\t\\t<input\\n\\t\\t\\t\\tnbInput\\n\\t\\t\\t\\ttype=\\\"text\\\"\\n\\t\\t\\t\\tclass=\\\"form-control\\\"\\n\\t\\t\\t\\tid=\\\"secretKey\\\"\\n\\t\\t\\t\\tname=\\\"secret-key\\\"\\n\\t\\t\\t\\tplaceholder=\\\"{{\\n\\t\\t\\t\\t\\t'FAKE_DATA.SETUP_MERCHANTS.PAYMENTS.PAYPAL.SECRET_KEY'\\n\\t\\t\\t\\t\\t\\t| translate\\n\\t\\t\\t\\t}}\\\"\\n\\t\\t\\t\\t[(ngModel)]=\\\"configModel.secretKey\\\"\\n\\t\\t\\t\\t#secretKey=\\\"ngModel\\\"\\n\\t\\t\\t\\t[ngClass]=\\\"{\\n\\t\\t\\t\\t\\t'input-danger':\\n\\t\\t\\t\\t\\t\\tsecretKey.invalid &&\\n\\t\\t\\t\\t\\t\\t(secretKey.dirty || secretKey.touched),\\n\\t\\t\\t\\t\\t'input-success':\\n\\t\\t\\t\\t\\t\\tsecretKey.valid &&\\n\\t\\t\\t\\t\\t\\t(secretKey.dirty || secretKey.touched)\\n\\t\\t\\t\\t}\\\"\\n\\t\\t\\t\\trequired\\n\\t\\t\\t/>\\n\\t\\t\\t<small\\n\\t\\t\\t\\tclass=\\\"text-danger\\\"\\n\\t\\t\\t\\t*ngIf=\\\"\\n\\t\\t\\t\\t\\tsecretKey.invalid && (secretKey.dirty || secretKey.touched)\\n\\t\\t\\t\\t\\\"\\n\\t\\t\\t>\\n\\t\\t\\t\\t<span *ngIf=\\\"secretKey.errors.required\\\">\\n\\t\\t\\t\\t\\t{{\\n\\t\\t\\t\\t\\t\\t'FAKE_DATA.SETUP_MERCHANTS.PAYMENTS.PAYPAL.SECRET_KEY_IS_REQUIRED'\\n\\t\\t\\t\\t\\t\\t\\t| translate\\n\\t\\t\\t\\t\\t}}\\n\\t\\t\\t\\t</span>\\n\\t\\t\\t</small>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<div class=\\\"row m-0\\\">\\n\\t\\t<div class=\\\"form-group col-md-12\\\">\\n\\t\\t\\t<label for=\\\"description\\\">\\n\\t\\t\\t\\t{{\\n\\t\\t\\t\\t\\t'FAKE_DATA.SETUP_MERCHANTS.PAYMENTS.PAYPAL.PAYMENT_DESCRIPTION'\\n\\t\\t\\t\\t\\t\\t| translate\\n\\t\\t\\t\\t}}\\n\\t\\t\\t</label>\\n\\t\\t\\t<input\\n\\t\\t\\t\\tnbInput\\n\\t\\t\\t\\ttype=\\\"text\\\"\\n\\t\\t\\t\\tclass=\\\"form-control\\\"\\n\\t\\t\\t\\tid=\\\"description\\\"\\n\\t\\t\\t\\tname=\\\"description\\\"\\n\\t\\t\\t\\tplaceholder=\\\"{{\\n\\t\\t\\t\\t\\t'FAKE_DATA.SETUP_MERCHANTS.PAYMENTS.PAYPAL.PAYMENT_DESCRIPTION'\\n\\t\\t\\t\\t\\t\\t| translate\\n\\t\\t\\t\\t}}\\\"\\n\\t\\t\\t\\t[(ngModel)]=\\\"configModel.description\\\"\\n\\t\\t\\t\\t#description=\\\"ngModel\\\"\\n\\t\\t\\t\\t[ngClass]=\\\"{\\n\\t\\t\\t\\t\\t'input-danger':\\n\\t\\t\\t\\t\\t\\tdescription.invalid &&\\n\\t\\t\\t\\t\\t\\t(description.dirty || description.touched),\\n\\t\\t\\t\\t\\t'input-success':\\n\\t\\t\\t\\t\\t\\tdescription.valid &&\\n\\t\\t\\t\\t\\t\\t(description.dirty || description.touched)\\n\\t\\t\\t\\t}\\\"\\n\\t\\t\\t\\trequired\\n\\t\\t\\t/>\\n\\t\\t\\t<small\\n\\t\\t\\t\\tclass=\\\"text-danger\\\"\\n\\t\\t\\t\\t*ngIf=\\\"\\n\\t\\t\\t\\t\\tdescription.invalid &&\\n\\t\\t\\t\\t\\t(description.dirty || description.touched)\\n\\t\\t\\t\\t\\\"\\n\\t\\t\\t>\\n\\t\\t\\t\\t<span *ngIf=\\\"description.errors.required\\\">\\n\\t\\t\\t\\t\\t{{\\n\\t\\t\\t\\t\\t\\t'FAKE_DATA.SETUP_MERCHANTS.PAYMENTS.PAYPAL.PAYMENT_DESCRIPTION_IS_REQUIRED'\\n\\t\\t\\t\\t\\t\\t\\t| translate\\n\\t\\t\\t\\t\\t}}\\n\\t\\t\\t\\t</span>\\n\\t\\t\\t</small>\\n\\t\\t</div>\\n\\t</div>\\n</form>\\n\"","export default \"<ea-stripe-gateway\\n\\t#stripeGateway\\n\\t[currenciesCodes]=\\\"currenciesCodes\\\"\\n\\t[companyBrandLogo]=\\\"warehouseLogo\\\"\\n></ea-stripe-gateway>\\n<ea-payPal-gateway\\n\\t#payPalGateway\\n\\t[currenciesCodes]=\\\"currenciesCodes\\\"\\n></ea-payPal-gateway>\\n\"","export default \"<div class=\\\"row m-0\\\">\\n\\t<div class=\\\"form-group col-md-12 p-0\\\">\\n\\t\\t<nb-checkbox [(ngModel)]=\\\"isStripeEnabled\\\">\\n\\t\\t\\t<img src=\\\"{{ logo }}\\\" width=\\\"20px\\\" alt=\\\"\\\" />\\n\\t\\t\\t{{ name }}\\n\\t\\t</nb-checkbox>\\n\\t</div>\\n</div>\\n\\n<form [hidden]=\\\"!isStripeEnabled\\\" #stripeConfigForm=\\\"ngForm\\\">\\n\\t<div class=\\\"row m-0\\\">\\n\\t\\t<div class=\\\"form-group col-md-6\\\">\\n\\t\\t\\t<label for=\\\"payButtontext\\\">\\n\\t\\t\\t\\t{{\\n\\t\\t\\t\\t\\t'FAKE_DATA.SETUP_MERCHANTS.PAYMENTS.STRIPE.PAY_BUTTON_TEXT'\\n\\t\\t\\t\\t\\t\\t| translate\\n\\t\\t\\t\\t}}\\n\\t\\t\\t</label>\\n\\t\\t\\t<input\\n\\t\\t\\t\\tnbInput\\n\\t\\t\\t\\ttype=\\\"text\\\"\\n\\t\\t\\t\\tclass=\\\"form-control\\\"\\n\\t\\t\\t\\tid=\\\"payButtontext\\\"\\n\\t\\t\\t\\tname=\\\"pay-button-text\\\"\\n\\t\\t\\t\\tplaceholder=\\\"{{\\n\\t\\t\\t\\t\\t'FAKE_DATA.SETUP_MERCHANTS.PAYMENTS.STRIPE.PAY_BUTTON_TEXT'\\n\\t\\t\\t\\t\\t\\t| translate\\n\\t\\t\\t\\t}}\\\"\\n\\t\\t\\t\\t[(ngModel)]=\\\"configModel.payButtontext\\\"\\n\\t\\t\\t\\t#payButtontext=\\\"ngModel\\\"\\n\\t\\t\\t\\t[ngClass]=\\\"{\\n\\t\\t\\t\\t\\t'input-danger':\\n\\t\\t\\t\\t\\t\\tpayButtontext.invalid &&\\n\\t\\t\\t\\t\\t\\t(payButtontext.dirty || payButtontext.touched),\\n\\t\\t\\t\\t\\t'input-success':\\n\\t\\t\\t\\t\\t\\tpayButtontext.valid &&\\n\\t\\t\\t\\t\\t\\t(payButtontext.dirty || payButtontext.touched)\\n\\t\\t\\t\\t}\\\"\\n\\t\\t\\t\\trequired\\n\\t\\t\\t/>\\n\\t\\t\\t<small\\n\\t\\t\\t\\tclass=\\\"text-danger\\\"\\n\\t\\t\\t\\t*ngIf=\\\"\\n\\t\\t\\t\\t\\tpayButtontext.invalid &&\\n\\t\\t\\t\\t\\t(payButtontext.dirty || payButtontext.touched)\\n\\t\\t\\t\\t\\\"\\n\\t\\t\\t>\\n\\t\\t\\t\\t<span *ngIf=\\\"payButtontext.errors.required\\\">\\n\\t\\t\\t\\t\\t{{\\n\\t\\t\\t\\t\\t\\t'FAKE_DATA.SETUP_MERCHANTS.PAYMENTS.STRIPE.PAY_BUTTON_TEXT_IS_REQUIRED'\\n\\t\\t\\t\\t\\t\\t\\t| translate\\n\\t\\t\\t\\t\\t}}\\n\\t\\t\\t\\t</span>\\n\\t\\t\\t</small>\\n\\t\\t</div>\\n\\n\\t\\t<div class=\\\"form-group col-md-6\\\">\\n\\t\\t\\t<label for=\\\"currency\\\">\\n\\t\\t\\t\\t{{\\n\\t\\t\\t\\t\\t'FAKE_DATA.SETUP_MERCHANTS.PAYMENTS.STRIPE.CURRENCY'\\n\\t\\t\\t\\t\\t\\t| translate\\n\\t\\t\\t\\t}}\\n\\t\\t\\t</label>\\n\\t\\t\\t<select\\n\\t\\t\\t\\t#currency=\\\"ngModel\\\"\\n\\t\\t\\t\\tname=\\\"currency\\\"\\n\\t\\t\\t\\t[(ngModel)]=\\\"configModel.currency\\\"\\n\\t\\t\\t\\tclass=\\\"form-control\\\"\\n\\t\\t\\t\\trequired\\n\\t\\t\\t>\\n\\t\\t\\t\\t<option value=\\\"\\\" disabled selected hidden>\\n\\t\\t\\t\\t\\t{{\\n\\t\\t\\t\\t\\t\\t'FAKE_DATA.SETUP_MERCHANTS.PAYMENTS.STRIPE.CHOOSE_CURRENCY_CODE'\\n\\t\\t\\t\\t\\t\\t\\t| translate\\n\\t\\t\\t\\t\\t}}</option\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t<option\\n\\t\\t\\t\\t\\t*ngFor=\\\"let code of currenciesCodes\\\"\\n\\t\\t\\t\\t\\tvalue=\\\"{{ code }}\\\"\\n\\t\\t\\t\\t\\t>{{ code }}</option\\n\\t\\t\\t\\t>\\n\\t\\t\\t</select>\\n\\t\\t\\t<small\\n\\t\\t\\t\\tclass=\\\"text-danger\\\"\\n\\t\\t\\t\\t*ngIf=\\\"currency.invalid && (currency.dirty || currency.touched)\\\"\\n\\t\\t\\t>\\n\\t\\t\\t\\t<span *ngIf=\\\"currency.errors.required\\\">\\n\\t\\t\\t\\t\\t{{\\n\\t\\t\\t\\t\\t\\t'FAKE_DATA.SETUP_MERCHANTS.PAYMENTS.STRIPE.CURRENCY_TEXT_IS_REQUIRED'\\n\\t\\t\\t\\t\\t\\t\\t| translate\\n\\t\\t\\t\\t\\t}}\\n\\t\\t\\t\\t</span>\\n\\t\\t\\t</small>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<div class=\\\"row mt-0 mr-0 ml-0 form-group\\\">\\n\\t\\t<div class=\\\"col-md-12\\\">\\n\\t\\t\\t<label for=\\\"logo\\\">\\n\\t\\t\\t\\t{{\\n\\t\\t\\t\\t\\t'FAKE_DATA.SETUP_MERCHANTS.PAYMENTS.STRIPE.CURRENCY_TEXT_IS_REQUIRED'\\n\\t\\t\\t\\t\\t\\t| translate\\n\\t\\t\\t\\t}}\\n\\t\\t\\t</label>\\n\\t\\t\\t<e-cu-file-uploader\\n\\t\\t\\t\\t#fileUploader\\n\\t\\t\\t\\t[placeholder]=\\\"COMPANY_BRAND_LOGO\\\"\\n\\t\\t\\t\\t[fileUrl]=\\\"configModel.companyBrandLogo\\\"\\n\\t\\t\\t\\t(uploadedImgUrl)=\\\"configModel.companyBrandLogo = $event\\\"\\n\\t\\t\\t\\t[customClass]=\\\"\\n\\t\\t\\t\\t\\tfileUploader.shownInput.dirty ||\\n\\t\\t\\t\\t\\tfileUploader.shownInput.touched ||\\n\\t\\t\\t\\t\\tconfigModel.companyBrandLogo !== ''\\n\\t\\t\\t\\t\\t\\t? invalidUrl || configModel.companyBrandLogo === ''\\n\\t\\t\\t\\t\\t\\t\\t? 'form-control-danger'\\n\\t\\t\\t\\t\\t\\t\\t: 'form-control-success'\\n\\t\\t\\t\\t\\t\\t: ''\\n\\t\\t\\t\\t\\\"\\n\\t\\t\\t></e-cu-file-uploader>\\n\\n\\t\\t\\t<small\\n\\t\\t\\t\\tclass=\\\"text-danger\\\"\\n\\t\\t\\t\\t*ngIf=\\\"\\n\\t\\t\\t\\t\\tfileUploader.shownInput.dirty ||\\n\\t\\t\\t\\t\\tfileUploader.shownInput.touched\\n\\t\\t\\t\\t\\\"\\n\\t\\t\\t>\\n\\t\\t\\t\\t<span *ngIf=\\\"configModel.companyBrandLogo === ''\\\">\\n\\t\\t\\t\\t\\t{{\\n\\t\\t\\t\\t\\t\\t'FAKE_DATA.SETUP_MERCHANTS.PAYMENTS.STRIPE.COMPANY_BRAND_LOGO_IS_REQUIRED'\\n\\t\\t\\t\\t\\t\\t\\t| translate\\n\\t\\t\\t\\t\\t}}\\n\\t\\t\\t\\t</span>\\n\\n\\t\\t\\t\\t<span *ngIf=\\\"invalidUrl && configModel.companyBrandLogo !== ''\\\">\\n\\t\\t\\t\\t\\t{{\\n\\t\\t\\t\\t\\t\\t'FAKE_DATA.SETUP_MERCHANTS.PAYMENTS.STRIPE.INVALID_LOGO_URL'\\n\\t\\t\\t\\t\\t\\t\\t| translate\\n\\t\\t\\t\\t\\t}}\\n\\t\\t\\t\\t</span>\\n\\t\\t\\t</small>\\n\\t\\t</div>\\n\\n\\t\\t<div\\n\\t\\t\\tclass=\\\"col-md-8 preview-img-container\\\"\\n\\t\\t\\t[hidden]=\\\"configModel.companyBrandLogo === '' || invalidUrl\\\"\\n\\t\\t>\\n\\t\\t\\t<div class=\\\"col-sm-10\\\">\\n\\t\\t\\t\\t<div class=\\\"row preview-img\\\">\\n\\t\\t\\t\\t\\t<img\\n\\t\\t\\t\\t\\t\\tsrc=\\\"{{ configModel.companyBrandLogo }}\\\"\\n\\t\\t\\t\\t\\t\\talt=\\\"Invalid logo\\\"\\n\\t\\t\\t\\t\\t\\tclass=\\\"img-rounded\\\"\\n\\t\\t\\t\\t\\t\\t(error)=\\\"invalidUrl = true\\\"\\n\\t\\t\\t\\t\\t\\t(load)=\\\"invalidUrl = false\\\"\\n\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t<div class=\\\"remove-icon\\\" (click)=\\\"deleteImg()\\\">\\n\\t\\t\\t\\t\\t\\t<span\\n\\t\\t\\t\\t\\t\\t\\tclass=\\\"ion-md-remove-circle text-danger pl-2\\\"\\n\\t\\t\\t\\t\\t\\t\\ttitle=\\\"{{\\n\\t\\t\\t\\t\\t\\t\\t\\t'FAKE_DATA.SETUP_MERCHANTS.PAYMENTS.STRIPE.REMOVE'\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t| translate\\n\\t\\t\\t\\t\\t\\t\\t}}\\\"\\n\\t\\t\\t\\t\\t\\t></span>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<div class=\\\"row m-0\\\">\\n\\t\\t<div class=\\\"form-group col-md-12\\\">\\n\\t\\t\\t<label for=\\\"publishableKey\\\">\\n\\t\\t\\t\\t{{\\n\\t\\t\\t\\t\\t'FAKE_DATA.SETUP_MERCHANTS.PAYMENTS.STRIPE.PUBLISHABLE_KEY'\\n\\t\\t\\t\\t\\t\\t| translate\\n\\t\\t\\t\\t}}\\n\\t\\t\\t</label>\\n\\t\\t\\t<input\\n\\t\\t\\t\\tnbInput\\n\\t\\t\\t\\ttype=\\\"text\\\"\\n\\t\\t\\t\\tclass=\\\"form-control\\\"\\n\\t\\t\\t\\tid=\\\"publishableKey\\\"\\n\\t\\t\\t\\tname=\\\"publishable-key\\\"\\n\\t\\t\\t\\tplaceholder=\\\"{{\\n\\t\\t\\t\\t\\t'FAKE_DATA.SETUP_MERCHANTS.PAYMENTS.STRIPE.PUBLISHABLE_KEY'\\n\\t\\t\\t\\t\\t\\t| translate\\n\\t\\t\\t\\t}}\\\"\\n\\t\\t\\t\\t[(ngModel)]=\\\"configModel.publishableKey\\\"\\n\\t\\t\\t\\t#publishableKey=\\\"ngModel\\\"\\n\\t\\t\\t\\t[ngClass]=\\\"{\\n\\t\\t\\t\\t\\t'input-danger':\\n\\t\\t\\t\\t\\t\\tpublishableKey.invalid &&\\n\\t\\t\\t\\t\\t\\t(publishableKey.dirty || publishableKey.touched),\\n\\t\\t\\t\\t\\t'input-success':\\n\\t\\t\\t\\t\\t\\tpublishableKey.valid &&\\n\\t\\t\\t\\t\\t\\t(publishableKey.dirty || publishableKey.touched)\\n\\t\\t\\t\\t}\\\"\\n\\t\\t\\t\\trequired\\n\\t\\t\\t/>\\n\\t\\t\\t<small\\n\\t\\t\\t\\tclass=\\\"text-danger\\\"\\n\\t\\t\\t\\t*ngIf=\\\"\\n\\t\\t\\t\\t\\tpublishableKey.invalid &&\\n\\t\\t\\t\\t\\t(publishableKey.dirty || publishableKey.touched)\\n\\t\\t\\t\\t\\\"\\n\\t\\t\\t>\\n\\t\\t\\t\\t<span *ngIf=\\\"publishableKey.errors.required\\\">\\n\\t\\t\\t\\t\\t{{\\n\\t\\t\\t\\t\\t\\t'FAKE_DATA.SETUP_MERCHANTS.PAYMENTS.STRIPE.PUBLISHABLE_KEY_IS_REQUIRED'\\n\\t\\t\\t\\t\\t\\t\\t| translate\\n\\t\\t\\t\\t\\t}}\\n\\t\\t\\t\\t</span>\\n\\t\\t\\t</small>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<div class=\\\"row m-0\\\">\\n\\t\\t<div class=\\\"form-group col-md-8\\\">\\n\\t\\t\\t<nb-checkbox\\n\\t\\t\\t\\tname=\\\"remember-me\\\"\\n\\t\\t\\t\\t[(ngModel)]=\\\"configModel.allowRememberMe\\\"\\n\\t\\t\\t>\\n\\t\\t\\t\\t{{\\n\\t\\t\\t\\t\\t'FAKE_DATA.SETUP_MERCHANTS.PAYMENTS.STRIPE.ALLOW_REMEMBER_ME'\\n\\t\\t\\t\\t\\t\\t| translate\\n\\t\\t\\t\\t}}\\n\\t\\t\\t</nb-checkbox>\\n\\t\\t</div>\\n\\t</div>\\n</form>\\n\"","import { DBObject, ModelName } from '../@pyro/db';\nimport IAdmin, { IAdminCreateObject } from '../interfaces/IAdmin';\nimport { Schema, Types } from '@pyro/db';\nimport { Entity, Column } from 'typeorm';\n\n/**\n * Registered Admin Users (e.g. Administrators)\n * TODO: will be renamed to \"Users\" (after we rename \"Users\" to \"Customers\")\n * Note: not related to Customers!\n *\n * @class Admin\n * @extends {DBObject<IAdmin, IAdminCreateObject>}\n * @implements {IAdmin}\n */\n@ModelName('Admin')\n@Entity({ name: 'admins' })\nclass Admin extends DBObject<IAdmin, IAdminCreateObject> implements IAdmin {\n\t/**\n\t * User Email\n\t *\n\t * @type {string}\n\t * @memberof Admin\n\t */\n\t@Schema({ type: String, unique: true })\n\t@Types.String()\n\t@Column()\n\temail: string;\n\n\t/**\n\t * Username\n\t *\n\t * @type {string}\n\t * @memberof Admin\n\t */\n\t@Types.String()\n\t@Column()\n\tname: string;\n\n\t/**\n\t * Password hash\n\t *\n\t * @type {string}\n\t * @memberof Admin\n\t */\n\t@Schema({ type: String, select: false })\n\t@Types.String()\n\t@Column()\n\thash: string;\n\n\t/**\n\t * User Picture (Avatar) Url\n\t *\n\t * @type {string}\n\t * @memberof Admin\n\t */\n\t@Types.String()\n\t@Column()\n\tpictureUrl: string;\n\n\t/**\n\t * Is User Removed (Deleted)\n\t *\n\t * @type {boolean}\n\t * @memberof Admin\n\t */\n\t@Types.Boolean(false)\n\t@Column()\n\tisDeleted: boolean;\n\n\t/**\n\t * User First Name\n\t *\n\t * @type {string}\n\t * @memberof Admin\n\t */\n\t@Schema({\n\t\ttype: String,\n\t\trequired: false,\n\t\tvalidate: new RegExp(`^[a-z ,.'-]+$`, 'i'),\n\t})\n\t@Column()\n\tfirstName?: string;\n\n\t/**\n\t * User Last Name\n\t *\n\t * @type {string}\n\t * @memberof Admin\n\t */\n\t@Schema({\n\t\ttype: String,\n\t\trequired: false,\n\t\tvalidate: new RegExp(`^[a-z ,.'-]+$`, 'i'),\n\t})\n\t@Column()\n\tlastName?: string;\n}\n\nexport default Admin;\n","import { ModelName, DBObject, Types, Schema } from '@pyro/db';\nimport { Entity, Column } from 'typeorm';\nimport ICurrency, { ICurrencyCreateObject } from '../interfaces/ICurrency';\n\n/**\n * @class Currency\n * @extends {DBObject<ICurrency, ICurrencyCreateObject>}\n * @implements {ICurrency}\n */\n@ModelName('Currency')\n@Entity({ name: 'currencies' })\nclass Currency extends DBObject<ICurrency, ICurrencyCreateObject>\n\timplements ICurrency {\n\t/**\n\t * Currency Code\n\t *\n\t * @type {string}\n\t * @memberof Currency\n\t */\n\t@Schema({ type: String, unique: true })\n\t@Column()\n\tcurrencyCode: string;\n\n\t/**\n\t * Is Currency removed completely from the system\n\t *\n\t * @type {boolean}\n\t * @memberof Currency\n\t */\n\t@Types.Boolean(false)\n\t@Column()\n\tisDeleted: boolean;\n}\n\nexport default Currency;\n\nexport const countriesDefaultCurrencies = {\n\tIL: 'ILS',\n\tRU: 'RUB',\n\tUS: 'USD',\n\tBG: 'BGN',\n};\n","import { Injectable } from '@angular/core';\nimport { Apollo } from 'apollo-angular';\nimport { Observable } from 'rxjs';\nimport Currency from '@modules/server.common/entities/Currency';\nimport gql from 'graphql-tag';\nimport { map, share } from 'rxjs/operators';\n\nexport interface CurrencyMutationRespone {\n\tsuccess: boolean;\n\tmessage?: string;\n\tdata?: Currency;\n}\n\n@Injectable()\nexport class CurrenciesService {\n\tconstructor(private readonly apollo: Apollo) {}\n\n\tprivate currencies$: Observable<Currency[]> = this.apollo\n\t\t.watchQuery<{ currencies: Currency[] }>({\n\t\t\tquery: gql`\n\t\t\t\tquery allCurrencies {\n\t\t\t\t\tcurrencies {\n\t\t\t\t\t\tcurrencyCode\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t`,\n\t\t\tpollInterval: 2000,\n\t\t})\n\t\t.valueChanges.pipe(\n\t\t\tmap((result) => result.data.currencies),\n\t\t\tshare()\n\t\t);\n\n\tgetCurrencies(): Observable<Currency[]> {\n\t\treturn this.currencies$;\n\t}\n\n\tcreate(createInput: {\n\t\tcurrencyCode: string;\n\t}): Observable<CurrencyMutationRespone> {\n\t\treturn this.apollo\n\t\t\t.mutate<{ createCurrency: CurrencyMutationRespone }>({\n\t\t\t\tmutation: gql`\n\t\t\t\t\tmutation CreateCurrency(\n\t\t\t\t\t\t$createInput: CurrencyCreateInput!\n\t\t\t\t\t) {\n\t\t\t\t\t\tcreateCurrency(createInput: $createInput) {\n\t\t\t\t\t\t\tsuccess\n\t\t\t\t\t\t\tmessage\n\t\t\t\t\t\t\tdata {\n\t\t\t\t\t\t\t\tcurrencyCode\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t`,\n\t\t\t\tvariables: {\n\t\t\t\t\tcreateInput,\n\t\t\t\t},\n\t\t\t})\n\t\t\t.pipe(\n\t\t\t\tmap((result) => result.data.createCurrency),\n\t\t\t\tshare()\n\t\t\t);\n\t}\n}\n","import { Component, Input, ViewChild } from '@angular/core';\nimport PaymentGateways, {\n\tpaymentGatewaysToString,\n\tpaymentGatewaysLogo,\n} from '@modules/server.common/enums/PaymentGateways';\nimport { Country } from '@modules/server.common/entities';\nimport { NgForm } from '@angular/forms';\nimport IPaymentGatewayCreateObject from '@modules/server.common/interfaces/IPaymentGateway';\n\n@Component({\n\tselector: 'ea-payPal-gateway',\n\ttemplateUrl: './payPal-gateway.component.html',\n})\nexport class PayPalGatewayComponent {\n\t@ViewChild('payPalConfigForm', { static: true })\n\tpayPalConfigForm: NgForm;\n\n\tisPayPalEnabled: boolean;\n\tname = paymentGatewaysToString(PaymentGateways.PayPal);\n\tlogo = paymentGatewaysLogo(PaymentGateways.PayPal);\n\n\t@Input()\n\tcurrenciesCodes: string[] = [];\n\t@Input()\n\twarehouseCountry: Country;\n\n\tconfigModel = {\n\t\tcurrency: '',\n\t\tmode: '',\n\t\tpublishableKey: '',\n\t\tsecretKey: '',\n\t\tdescription: '',\n\t};\n\n\tpayPalTypes = ['sandbox', 'live'];\n\n\tget isFormValid(): boolean {\n\t\tlet isValid = false;\n\n\t\tif (this.payPalConfigForm) {\n\t\t\tisValid =\n\t\t\t\t(this.payPalConfigForm.touched ||\n\t\t\t\t\tthis.payPalConfigForm.dirty) &&\n\t\t\t\tthis.payPalConfigForm.valid;\n\t\t}\n\n\t\treturn isValid;\n\t}\n\n\tget createObject(): IPaymentGatewayCreateObject | null {\n\t\tif (!this.isFormValid || !this.isPayPalEnabled) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn {\n\t\t\tpaymentGateway: PaymentGateways.PayPal,\n\t\t\tconfigureObject: this.configModel,\n\t\t};\n\t}\n\n\tsetValue(data) {\n\t\tthis.isPayPalEnabled = true;\n\t\tthis.configModel.currency = data['currency'] || '';\n\t\tthis.configModel.mode = data['mode'] || '';\n\t\tthis.configModel.publishableKey = data['publishableKey'] || '';\n\t\tthis.configModel.secretKey = data['secretKey'] || '';\n\t\tthis.configModel.description = data['description'] || '';\n\t}\n}\n","import { Component, Input, ViewChild, OnChanges } from '@angular/core';\nimport { Country } from '@modules/server.common/entities';\nimport { StripeGatewayComponent } from './stripe-gateway/stripe-gateway.component';\nimport { PayPalGatewayComponent } from './payPal-gateway/payPal-gateway.component';\nimport IPaymentGatewayCreateObject from '@modules/server.common/interfaces/IPaymentGateway';\nimport { CurrenciesService } from '@app/@core/data/currencies.service';\nimport { first } from 'rxjs/operators';\nimport Warehouse from '@modules/server.common/entities/Warehouse';\nimport PaymentGateways from '@modules/server.common/enums/PaymentGateways';\nimport { countriesDefaultCurrencies } from '@modules/server.common/entities/Currency';\n\n@Component({\n\tselector: 'ea-payment-gateways',\n\ttemplateUrl: './payment-gateways.component.html',\n})\nexport class PaymentGatewaysComponent implements OnChanges {\n\t@ViewChild('stripeGateway')\n\tstripeGateway: StripeGatewayComponent;\n\n\t@ViewChild('payPalGateway')\n\tpayPalGateway: PayPalGatewayComponent;\n\n\t@Input()\n\twarehouseLogo: string;\n\t@Input()\n\twarehouseCountry: Country;\n\t@Input()\n\tisEdit: boolean;\n\n\tcurrenciesCodes: string[] = [];\n\n\tconstructor(private currenciesService: CurrenciesService) {\n\t\tthis.loadCurrenciesCodes();\n\t}\n\n\tget isValid(): boolean {\n\t\tlet valid = false;\n\t\tif (\n\t\t\tthis.stripeGateway.isStripeEnabled ||\n\t\t\tthis.payPalGateway.isPayPalEnabled\n\t\t) {\n\t\t\tif (this.stripeGateway.isStripeEnabled) {\n\t\t\t\tvalid = this.stripeGateway.isFormValid;\n\n\t\t\t\tif (!valid) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.payPalGateway.isPayPalEnabled) {\n\t\t\t\tvalid = this.payPalGateway.isFormValid;\n\n\t\t\t\tif (!valid) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn valid;\n\t}\n\n\tget paymentsGateways(): IPaymentGatewayCreateObject[] {\n\t\tconst paymentsGateways = [];\n\n\t\tconst stripeGatewayCreateObject = this.stripeGateway.createObject;\n\t\tconst payPalGatewayCreateObject = this.payPalGateway.createObject;\n\n\t\tif (stripeGatewayCreateObject) {\n\t\t\tpaymentsGateways.push(stripeGatewayCreateObject);\n\t\t}\n\n\t\tif (payPalGatewayCreateObject) {\n\t\t\tpaymentsGateways.push(payPalGatewayCreateObject);\n\t\t}\n\n\t\treturn paymentsGateways;\n\t}\n\n\tngOnChanges(): void {\n\t\tconst merchantCountry = Country[this.warehouseCountry];\n\n\t\tif (merchantCountry) {\n\t\t\tconst defaultCurrency =\n\t\t\t\tcountriesDefaultCurrencies[merchantCountry.toString()] || '';\n\n\t\t\tif (\n\t\t\t\tthis.stripeGateway &&\n\t\t\t\t(!this.isEdit || !this.stripeGateway.configModel.currency)\n\t\t\t) {\n\t\t\t\tthis.stripeGateway.configModel.currency = defaultCurrency;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tthis.payPalGateway &&\n\t\t\t\t(!this.isEdit || !this.payPalGateway.configModel.currency)\n\t\t\t) {\n\t\t\t\tthis.payPalGateway.configModel.currency = defaultCurrency;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async loadCurrenciesCodes() {\n\t\tconst res = await this.currenciesService\n\t\t\t.getCurrencies()\n\t\t\t.pipe(first())\n\t\t\t.toPromise();\n\n\t\tif (res) {\n\t\t\tthis.currenciesCodes = res.map((r) => r.currencyCode);\n\t\t}\n\t}\n\n\tsetValue(merchant: Warehouse) {\n\t\tif (merchant.paymentGateways) {\n\t\t\tconst stripeConfigObj = merchant.paymentGateways.find(\n\t\t\t\t(g) => g.paymentGateway === PaymentGateways.Stripe\n\t\t\t);\n\n\t\t\tif (stripeConfigObj) {\n\t\t\t\tthis.stripeGateway.setValue(stripeConfigObj.configureObject);\n\t\t\t}\n\n\t\t\tconst payPalConfigObj = merchant.paymentGateways.find(\n\t\t\t\t(g) => g.paymentGateway === PaymentGateways.PayPal\n\t\t\t);\n\n\t\t\tif (payPalConfigObj) {\n\t\t\t\tthis.payPalGateway.setValue(payPalConfigObj.configureObject);\n\t\t\t}\n\t\t}\n\t}\n}\n","import { NgModule } from '@angular/core';\nimport { ThemeModule } from '@app/@theme';\nimport { CommonModule } from '@angular/common';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { PaymentGatewaysComponent } from './payment-gateways.component';\nimport { StripeGatewayComponent } from './stripe-gateway/stripe-gateway.component';\nimport { PayPalGatewayComponent } from './payPal-gateway/payPal-gateway.component';\nimport { FileUploaderModule } from '@app/@shared/file-uploader/file-uploader.module';\nimport { CurrenciesService } from '@app/@core/data/currencies.service';\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n\t\tThemeModule,\n\t\tTranslateModule.forChild(),\n\t\tFileUploaderModule,\n\t],\n\tdeclarations: [\n\t\tPaymentGatewaysComponent,\n\t\tStripeGatewayComponent,\n\t\tPayPalGatewayComponent,\n\t],\n\texports: [PaymentGatewaysComponent],\n\tproviders: [CurrenciesService],\n})\nexport class PaymentGatewaysModule {}\n","import { Component, Input, OnChanges, ViewChild } from '@angular/core';\nimport PaymentGateways, {\n\tpaymentGatewaysToString,\n\tpaymentGatewaysLogo,\n} from '@modules/server.common/enums/PaymentGateways';\nimport { Country } from '@modules/server.common/entities';\nimport { NgForm } from '@angular/forms';\nimport IPaymentGatewayCreateObject from '@modules/server.common/interfaces/IPaymentGateway';\nimport { TranslateService } from '@ngx-translate/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\n@Component({\n\tselector: 'ea-stripe-gateway',\n\ttemplateUrl: './stripe-gateway.component.html',\n})\nexport class StripeGatewayComponent {\n\t@ViewChild('stripeConfigForm', { static: true })\n\tstripeConfigForm: NgForm;\n\n\tisStripeEnabled: boolean;\n\tname = paymentGatewaysToString(PaymentGateways.Stripe);\n\tlogo = paymentGatewaysLogo(PaymentGateways.Stripe);\n\tinvalidUrl: boolean;\n\n\tprivate _ngDestroy$ = new Subject<void>();\n\n\tCOMPANY_BRAND_LOGO =\n\t\t'FAKE_DATA.SETUP_MERCHANTS.PAYMENTS.STRIPE.COMPANY_BRAND_LOGO';\n\n\t@Input()\n\tcurrenciesCodes: string[] = [];\n\t@Input()\n\twarehouseCountry: Country;\n\t@Input()\n\tset companyBrandLogo(logo: string) {\n\t\tif (!this.configModel.companyBrandLogo) {\n\t\t\tthis.configModel.companyBrandLogo = logo;\n\t\t}\n\t}\n\n\tconstructor(private translateService: TranslateService) {\n\t\t// https://github.com/ngx-translate/core/issues/835\n\t\t// see how to translate words in the component(.ts) file\n\n\t\ttranslateService\n\t\t\t.stream(this.COMPANY_BRAND_LOGO)\n\t\t\t.pipe(takeUntil(this._ngDestroy$))\n\t\t\t.subscribe((text: string) => {\n\t\t\t\tthis.COMPANY_BRAND_LOGO = text;\n\t\t\t});\n\t}\n\n\tconfigModel = {\n\t\tpayButtontext: '',\n\t\tcurrency: '',\n\t\tcompanyBrandLogo: '',\n\t\tpublishableKey: '',\n\t\tallowRememberMe: true,\n\t};\n\n\tget isFormValid(): boolean {\n\t\tlet isValid = false;\n\n\t\tif (this.stripeConfigForm) {\n\t\t\tisValid =\n\t\t\t\t(this.stripeConfigForm.touched ||\n\t\t\t\t\tthis.stripeConfigForm.dirty) &&\n\t\t\t\tthis.stripeConfigForm.valid &&\n\t\t\t\t!this.invalidUrl &&\n\t\t\t\tthis.configModel.companyBrandLogo !== '';\n\t\t}\n\n\t\treturn isValid;\n\t}\n\n\tget createObject(): IPaymentGatewayCreateObject | null {\n\t\tif (!this.isFormValid || !this.isStripeEnabled) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn {\n\t\t\tpaymentGateway: PaymentGateways.Stripe,\n\t\t\tconfigureObject: this.configModel,\n\t\t};\n\t}\n\n\tdeleteImg() {\n\t\tthis.configModel.companyBrandLogo = '';\n\t}\n\n\tsetValue(data) {\n\t\tthis.isStripeEnabled = true;\n\t\tthis.configModel.payButtontext = data['payButtontext'] || '';\n\t\tthis.configModel.currency = data['currency'] || '';\n\t\tthis.configModel.companyBrandLogo = data['companyBrandLogo'] || '';\n\t\tthis.configModel.publishableKey = data['publishableKey'] || '';\n\t\tthis.configModel.allowRememberMe = data['allowRememberMe'];\n\t}\n\n\tngOnDestroy() {\n\t\tthis._ngDestroy$.next();\n\t\tthis._ngDestroy$.complete();\n\t}\n}\n"]}